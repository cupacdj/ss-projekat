%{
    #include <iostream>
    #include "structures.hpp"
    #include <vector>
    #include <string>
    #include "assembler.hpp"
  

    extern int yylex();
    void yyerror(const char* s);
    extern int lineNum;
    Assembler &assembler = Assembler::getInstance();
    Operand *operand = new Operand();
    std::vector <std::string> symbolList;

%}

%union {
  int gpr;
  int csr;
  int number;
  char* strVal;
}

%token <strVal> LABEL

%token PLUS DOLLAR LEFT_BRACKET RIGHT_BRACKET COMMA
       
%token ENDL COMMENT

%token  INS_HALT INS_INT INS_IRET INS_CALL INS_RET INS_JMP
        INS_BEQ INS_BNE INS_BGT INS_PUSH INS_POP INS_XCHG
        INS_ADD INS_SUB INS_MUL INS_DIV INS_NOT INS_AND
        INS_OR INS_XOR INS_SHL INS_SHR INS_LD INS_ST
        INS_CSRRD INS_CSRWR

%token  DIR_GLOBAL DIR_EXTERN DIR_SECTION DIR_WORD
        DIR_SKIP

%token <number> NUMBER

%token <gpr> GPR
%token <csr> CSR

%token <strVal> SYMBOL


%%

File: 
    File Line
  | Line

Line:
    Instruction ENDL
  | Directive ENDL
  | LABEL ENDL                                { assembler.label($1); }
  | LABEL Instruction ENDL                    { assembler.label($1); }
  | LABEL Directive ENDL                      { assembler.label($1); }
  | ENDL
  | Instruction COMMENT ENDL
  | Directive COMMENT ENDL
  | LABEL COMMENT ENDL                        { assembler.label($1); }
  | LABEL Instruction COMMENT ENDL            { assembler.label($1); }
  | LABEL Directive COMMENT ENDL              { assembler.label($1); }
  | COMMENT ENDL


Instruction:
    INS_HALT                                   { assembler.parseHalt(); }
  | INS_INT                                    { assembler.parseInt(); }
  | INS_IRET                                   { assembler.parseIret(); }
  | INS_CALL IndirOperand                      { assembler.parseCall(operand); }
  | INS_RET                                    { assembler.parseRet(); }
  | INS_JMP IndirOperand                       { assembler.parseJump(0, 0, operand, JumpType::UNCOND); }
  | INS_BEQ GPR COMMA GPR COMMA IndirOperand   { assembler.parseJump($2, $4, operand, JumpType::EQ); }
  | INS_BNE GPR COMMA GPR COMMA IndirOperand   { assembler.parseJump($2, $4, operand, JumpType::NE); }
  | INS_BGT GPR COMMA GPR COMMA IndirOperand   { assembler.parseJump($2, $4, operand, JumpType::GT); }
  | INS_PUSH GPR                               { assembler.parsePush($2); }
  | INS_POP GPR                                { assembler.parsePop($2); }
  | INS_XCHG GPR COMMA GPR                     { assembler.parseXchg($2, $4); }
  | INS_ADD GPR COMMA GPR                      { assembler.parseArith($2, $4, ArithType::ADD); }
  | INS_SUB GPR COMMA GPR                      { assembler.parseArith($2, $4, ArithType::SUB); }
  | INS_MUL GPR COMMA GPR                      { assembler.parseArith($2, $4, ArithType::MUL); }
  | INS_DIV GPR COMMA GPR                      { assembler.parseArith($2, $4, ArithType::DIV); }
  | INS_NOT GPR                                { assembler.parseLogi(0, $2, LogiType::NOT); }
  | INS_AND GPR COMMA GPR                      { assembler.parseLogi($2, $4, LogiType::AND); }
  | INS_OR GPR COMMA GPR                       { assembler.parseLogi($2, $4, LogiType::OR); }
  | INS_XOR GPR COMMA GPR                      { assembler.parseLogi($2, $4, LogiType::XOR); }
  | INS_SHL GPR COMMA GPR                      { assembler.parseShl($2, $4); }
  | INS_SHR GPR COMMA GPR                      { assembler.parseShr($2, $4); }
  | INS_LD Operand COMMA GPR                   { assembler.parseLd(operand, $4); }
  | INS_ST GPR COMMA Operand                   { assembler.parseSt($2, operand); }
  | INS_CSRRD CSR COMMA GPR                    { assembler.parseCsrrd($2, $4); }
  | INS_CSRWR GPR COMMA CSR                    { assembler.parseCsrwr($2, $4); }


Directive:
    DIR_GLOBAL SYMLIST                         { assembler.parseGlobal(symbolList); }
  | DIR_EXTERN SYMLIST                         { assembler.parseGlobal(symbolList); }
  | DIR_SECTION SYMBOL                         { assembler.parseSection($2); }
  | DIR_WORD SYM_VAL_LIST                      { assembler.parseWord(symbolList); }
  | DIR_SKIP NUMBER                            { assembler.parseSkip($2); }

IndirOperand:
    SYMBOL                                     { operand->adrType = AdrType::MDIR_SYM; operand->symbol = $1; }
  | NUMBER                                     { operand->adrType = AdrType::MDIR_LIT; operand->literal = $1; }

Operand:
    GPR                                        { operand->adrType = AdrType::REG_DIR; operand->reg = $1; }
  | NUMBER                                     { operand->adrType = AdrType::MDIR_LIT; operand->literal = $1; }
  | SYMBOL                                     { operand->adrType = AdrType::MDIR_SYM; operand->symbol = $1; }
  | DOLLAR NUMBER                              { operand->adrType = AdrType::IMMED; operand->literal = $2; }
  | DOLLAR SYMBOL                              { operand->adrType = AdrType::SYMB; operand->symbol = $2; }
  | LEFT_BRACKET GPR RIGHT_BRACKET             { operand->adrType = AdrType::REG_IND; operand->reg = $2; }
  | LEFT_BRACKET GPR PLUS NUMBER RIGHT_BRACKET { operand->adrType = AdrType::REG_LIT; operand->reg = $2; operand->literal = $4; }
  

SYM_VAL_LIST:
    SYMBOL                                     { symbolList.clear(); symbolList.push_back($1); }
  | NUMBER                                     { symbolList.clear(); symbolList.push_back(std::to_string($1)); }
  | SYM_VAL_LIST COMMA SYMBOL                  { symbolList.push_back($3); }
  | SYM_VAL_LIST COMMA NUMBER                  { symbolList.push_back(std::to_string($3));}
  


SYMLIST:
    SYMBOL                                     { symbolList.clear(); symbolList.push_back($1); }
  | SYMLIST COMMA SYMBOL                       { symbolList.push_back($3); }
  

%%

void yyerror(const char *s) {
  std::cout << "Parsing error at line: " << lineNum << std::endl;
  exit(-1);
}